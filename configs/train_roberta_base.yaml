pretrained_model: null


model:
  label_ids: null # will be filled during training

  class_labels:
    class_labels_file: label_ids.csv # will be generated during training and saved in .nemo file

  dataset:
    data_dir: "./data" # /path/to/data
    class_balancing: null # choose from [null, weighted_loss]. Weighted_loss enables the weighted class balancing of the loss, may be used for handling unbalanced classes
    max_seq_length: 128
    pad_label: 'O'
    ignore_extra_tokens: false
    ignore_start_end: false
    use_cache: false
    # shared among dataloaders
    num_workers:  2
    pin_memory: false
    drop_last: false

  train_ds:
    text_file: text_train.txt
    labels_file: labels_train.txt
    shuffle: true
    num_samples: -1
    batch_size: 32

  validation_ds:
    text_file: text_dev.txt
    labels_file: labels_dev.txt
    shuffle: false
    num_samples: -1
    batch_size: 8

  test_ds:
    text_file: text_dev.txt
    labels_file: labels_dev.txt
    shuffle: false
    num_samples: -1
    batch_size: 8

  tokenizer:
    tokenizer_name: ${model.language_model.pretrained_model_name} # or sentencepiece
    vocab_file: null # path to vocab file
    tokenizer_model: null # only used if tokenizer is sentencepiece
    special_tokens: null

  language_model:
    pretrained_model_name: roberta-base
    lm_checkpoint: null
    config_file: null # json file, precedence over config
    config: null

  head:
    num_fc_layers: 2
    fc_dropout: 0.5
    activation: 'relu'
    use_transformer_init: True

  optim:
    name: adam
    lr: 5e-5
    weight_decay: 0.00

    sched:
      name: WarmupAnnealing
      # Scheduler params
      warmup_steps: null
      warmup_ratio: 0.1
      last_epoch: -1

      # pytorch lightning args
      monitor: val_loss
      reduce_on_plateau: false


trainer:
  devices: 1 # the number of gpus, 0 for CPU
  num_nodes: 1
  max_epochs: 5
  max_steps: -1 # precedence over max_epochs
  accumulate_grad_batches: 1 # accumulates grads every k batches
  gradient_clip_val: 0.0
  precision: 32 # Should be set to 16 for O1 and O2, default is 16 as PT ignores it when am_level is O0
  accelerator: gpu
  enable_checkpointing: False  # Provided by exp_manager
  logger: False  # Provided by exp_manager
  log_every_n_steps: 1  # Interval of logging.
  val_check_interval: 1.0  # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.


exp_manager:
  exp_dir: "experiments/"
  name: "roberta_base"
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "f1"
    mode: "max"
    save_top_k: 2
    always_save_nemo: True # saves the checkpoints as nemo files instead of PTL checkpoints
    save_best_model: True
    verbose: False

  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null

  # You may use this section to create a ClearML logger
  create_clearml_logger: true
  clearml_logger_kwargs:
    task: "roberta_base" # Task name for this experiment 
    project: "Text/NLP/NER" # Project name for this experiment
    tags:
      - NeMo
    # model_name: "Some name" # Model name in ClearML (default from exp_manager:name)
    log_model: false # If true - logging model .nemo file ClearML
    log_cfg: true # If true - logging model config to model ClearML instance
    log_metrics: true # If true - logging lightning metrics to model ClearML instance
    connect_pytorch: false # If true - enable automatic pytorch logging (all saved checkpoints)
